#include <bits/stdc++.h>
#include "Pair.h"
#include "Complex.h"

using namespace std;
//Я специально ввел в функции "0", чтобы четко видеть что сделали f1 и f2.
void f1(Pair & c) {
    c.setRE(0);
}
Pair f2() {
    Complex l(0, 0);
    return l;
}

int main() {
    //Сделал блочно, что бы не придумывать много названий для объектов, ведь
    // разобраться в a,b,c  проще всего.

//     Pair a;
//     cin >> a;
//     cout << a;
//     Pair b;
//     cin >> b;
//     cout << b;
//     Pair c;
//     c = a + b;
//        printf("\nоперация сложения пар (а, b) + (с, d) = (а + b, с + d)  ---> ");
//     cout << c;
    //__________________________________________________________________________________________________________

//    Complex a;
//    cin >>a;
//    cout << a;
//    Complex b;
//    cin >> b;
//    cout << b;
//    Complex c;
//    c = a * b;
//        printf("\nоперация умножения пар (a, b) * (c, d) = (ас – bd, ad + bc).  ---> ");
//    cout << c;
    //__________________________________________________________________________________________________________
//
//    Complex a;
//    cin >>a;
//    cout << a;
//    Complex b;
//    cin >> b;
//    cout << b;
//    Complex c;
//    c = a - b;
//        printf("\nоперация вычитания пар (а, b) – (с, d) = (а – b, с – d).  ---> ");
//    cout << c;
    //__________________________________________________________________________________________________________

//     Pair a;
//     cin >> a;
//     printf("\nОбъект а до подстановки    ");
//     cout << a;
//     printf("\nОбъект а после подстановки ");
//     a = f2();
//     cout << a << endl;
//     Complex b;
//     cin >> b;
//     printf("\nОбъект b до подстановки    ");
//     cout << b;
//     f1(b);
//     printf("Объект b после подстановки ");
//     cout << b;

    return 0;
}
